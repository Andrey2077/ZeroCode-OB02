# Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей,
# имеют дополнительный уровень доступа и могут добавлять или удалять пользователя из системы.
#
# Требования:
#
# 1.Класс `User*:
# Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа ('user' для обычных сотрудников).
#
# 2.Класс `Admin`:
# Этот класс должен наследоваться от класса `User`.
# Добавь дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
# Класс должен также содержать методы `add_user` и `remove_user`, которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров `User`).
#
# 3.Инкапсуляция данных:
# Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

#
from user_module import User
from admin_module import Admin

# 1.Класс `User*:
# Этот класс должен инкапсулировать данные о пользователе:
# ID, имя и уровень доступа ('user' для обычных сотрудников).
#


admin = Admin("234", "Joe", True, True)
user_Joe = User("222", "Vasya", True)
Admin.add_user(user_Joe)
user_Vasya = User("222", "Vasya", True)
Admin.add_user(user_Vasya)
user_Fedya = User("242", "Fedya", True)
Admin.add_user(user_Fedya)
Admin.remove_user(user_Joe)

for user_in_list in Admin.list_of_users:
    print(user_in_list.get_name())
